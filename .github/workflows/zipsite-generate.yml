name: ZipSite Generate from Airtable

on:
  workflow_dispatch:
    inputs:
      recordId:
        description: "Airtable record ID (e.g., recXXXXXXXXXXXXXX)"
        required: true
        type: string
  repository_dispatch:
    types: [zipsite_generate]

jobs:
  build-from-brief:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      RID: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.recordId) || github.event.inputs.recordId }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      # ---- Fetch Airtable record ----
      - name: Fetch Airtable brief
        uses: actions/github-script@v7
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_TABLE: ${{ secrets.AIRTABLE_PROJECTS_TABLE }}
          RECORD_ID: ${{ env.RID }}
        with:
          script: |
            const fs = require('fs');
            const base = process.env.AIRTABLE_BASE_ID;
            const table = encodeURIComponent(process.env.AIRTABLE_TABLE);
            const rec = process.env.RECORD_ID;
            if (!rec) { core.setFailed('Missing RECORD_ID'); return; }
            const url = `https://api.airtable.com/v0/${base}/${table}/${rec}`;
            const res = await fetch(url, { headers: { Authorization: `Bearer ${process.env.AIRTABLE_API_KEY}` } });
            if (!res.ok) { core.setFailed(`Airtable ${res.status}: ${await res.text()}`); return; }
            const json = await res.json();
            fs.writeFileSync('brief.json', JSON.stringify(json, null, 2));

      # ---- Plan with GPT (returns strict JSON) ----
      - name: Plan with GPT
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const fs = require('fs');
            const brief = JSON.parse(fs.readFileSync('brief.json','utf8'));

            const sys = `You are the Web Planning Lead for ZipSite Studio.
Return ONLY JSON with this schema:
{
  "planMd": "markdown for /plan/plan.md",
  "brandBriefMd": "markdown for /plan/brand-brief.md"
}
- planMd: sitemap, per-page sections (H1/H2 + bullets), component list (only {Hero, FeatureCards, Pricing, Testimonials, FAQ, Contact, Footer, Nav}), SEO (title/meta/5 keywords/page), accessibility checklist.
- brandBriefMd: brand voice, tone, color guidance with contrast notes, imagery guidance aligned to "Imagery style".`;

            const body = {
              model: "gpt-4o-mini",
              response_format: { type: "json_object" },
              messages: [
                { role: "system", content: sys },
                { role: "user", content: JSON.stringify(brief) }
              ]
            };

            const res = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: { "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`, "Content-Type":"application/json" },
              body: JSON.stringify(body)
            });
            if (!res.ok) { core.setFailed(`OpenAI ${res.status}: ${await res.text()}`); return; }
            const j = await res.json();
            const content = j?.choices?.[0]?.message?.content || "{}";
            let out; try { out = JSON.parse(content); } catch (e) { core.setFailed("Model did not return JSON"); return; }

            require('fs').mkdirSync('plan', { recursive: true });
            fs.writeFileSync('plan/plan.md', out.planMd || "# Plan\n");
            fs.writeFileSync('plan/brand-brief.md', out.brandBriefMd || "# Brand Brief\n");

      # ---- Generate pages with GPT (strict JSON) ----
      - name: Generate pages with GPT
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const plan = fs.readFileSync('plan/plan.md','utf8');
            const brief = fs.readFileSync('plan/brand-brief.md','utf8');

            const sys = `You are a Frontend Implementer. Use our Next.js App Router + Tailwind + shadcn/ui template.
Return ONLY JSON:
{ "files": [ { "path": "app/(pages)/index/page.tsx", "content": "..." }, ... ] }
Rules:
- Create pages/components per the plan.
- Use ONLY {Hero, FeatureCards, Pricing, Testimonials, FAQ, Contact, Footer, Nav}.
- Add alt text; desktop nav inline, mobile hamburger; avoid horizontal scroll.
- No new npm dependencies. If something is missing, include /CHECKLIST.md with TODOs.`;

            const user = `/plan/plan.md
${plan}

            /plan/brand-brief.md
${brief}`;

            const body = {
              model: "gpt-4o-mini",
              response_format: { type: "json_object" },
              messages: [
                { role: "system", content: sys },
                { role: "user", content: user }
              ]
            };

            const res = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: { "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`, "Content-Type":"application/json" },
              body: JSON.stringify(body)
            });
            if (!res.ok) { core.setFailed(`OpenAI ${res.status}: ${await res.text()}`); return; }
            const j = await res.json();
            const content = j?.choices?.[0]?.message?.content || '{"files":[]}';
            let out; try { out = JSON.parse(content); } catch (e) { core.setFailed("Model did not return JSON"); return; }

            const files = Array.isArray(out.files) ? out.files : [];
            const mkdirp = (p) => fs.mkdirSync(p, { recursive: true });
            for (const f of files) {
              if (!f?.path) continue;
              const p = f.path.replace(/^\/+/, "");
              mkdirp(path.dirname(p));
              fs.writeFileSync(p, f.content ?? "");
            }
            mkdirp("plan"); fs.writeFileSync("plan/.keep","");

      - name: Create build branch
        id: branch
        run: |
          BR="build-${RID}"
          git config user.name "zipsite-bot"
          git config user.email "bot@zipsitestudio.com"
          git checkout -B "$BR"
          echo "BRANCH=$BR" >> $GITHUB_OUTPUT

      - name: Commit files
        run: |
          git add -A
          git commit -m "auto: plan + scaffold from Airtable ${RID}" || echo "No changes to commit"
          git push -u origin "${{ steps.branch.outputs.BRANCH }}" || true

      - name: Open Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          title: Auto build for ${{ env.RID }}
          body: Generated from Airtable record
          branch: ${{ steps.branch.outputs.BRANCH }}
          base: main
          delete-branch: false
          commit-message: auto: plan + scaffold from Airtable ${{ env.RID }}
