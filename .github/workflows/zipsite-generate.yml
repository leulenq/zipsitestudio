name: ZipSite Generate from Airtable
on:
  workflow_dispatch:  
  repository_dispatch:  
    types: [zipsite_generate]

jobs:
  build-from-brief:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Fetch Airtable brief
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_TABLE: ${{ secrets.AIRTABLE_PROJECTS_TABLE }}
          RECORD_ID: ${{ github.event.client_payload.recordId }}
        run: |
          node -e '
          const https=require("https"),fs=require("fs");
          const base=process.env.AIRTABLE_BASE_ID;
          const table=encodeURIComponent(process.env.AIRTABLE_TABLE);
          const rec=process.env.RECORD_ID;
          const opts={hostname:"api.airtable.com",path:`/v0/${base}/${table}/${rec}`,headers:{Authorization:`Bearer ${process.env.AIRTABLE_API_KEY}`}};
          https.get(opts,(res)=>{let d="";res.on("data",c=>d+=c);res.on("end",()=>fs.writeFileSync("brief.json",d));});
          '

      - name: Plan with GPT (write /plan/*.md)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node -e '
          const fs=require("fs");
          const brief=JSON.parse(fs.readFileSync("brief.json","utf8"));
          const sys=`You are the Web Planning Lead for ZipSite Studio. Given the brief (JSON of the Airtable fields), produce:
          1) /plan/plan.md: sitemap, per-page sections with H1/H2 and bullets, component list (choose only from {Hero, FeatureCards, Pricing, Testimonials, FAQ, Contact, Footer, Nav}), SEO (title/meta/5 keywords/page), accessibility checklist.
          2) /plan/brand-brief.md: brand voice, tone, color guidance with contrast notes, imagery guidance aligned to "Imagery style".
          Keep it concise and production-focused.`;
          const user=JSON.stringify(brief);
          const body={model:"gpt-4o-mini",messages:[{role:"system",content:sys},{role:"user",content:user}]};
          fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${process.env.OPENAI_API_KEY}`,"Content-Type":"application/json"},body:JSON.stringify(body)})
          .then(r=>r.json()).then(j=>{
            const out=j.choices?.[0]?.message?.content||"";
            require("fs").mkdirSync("plan",{recursive:true});
            let [a,b]=out.split("/plan/brand-brief.md");
            fs.writeFileSync("plan/plan.md",(a||"").replace(/^.*\/plan\/plan\.md\s*/s,"").trim());
            fs.writeFileSync("plan/brand-brief.md",(b||"").trim());
          });
          '

      - name: Generate pages with GPT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node -e '
          const fs=require("fs"),path=require("path");
          const plan=fs.readFileSync("plan/plan.md","utf8");
          const brief=fs.readFileSync("plan/brand-brief.md","utf8");
          const sys=`You are a Frontend Implementer. Use our Next.js App Router + Tailwind + shadcn/ui template.
          Input: /plan/plan.md and /plan/brand-brief.md (plain text below).
          Tasks:
          - Generate pages under /app/(pages) according to the plan, using ONLY {Hero, FeatureCards, Pricing, Testimonials, FAQ, Contact, Footer, Nav}.
          - Fill props/content from the brief; add meaningful alt text; responsive nav (desktop inline, mobile hamburger).
          - No new npm dependencies. If something is missing, add a TODO in /CHECKLIST.md.
          Output: return JSON array of files: [{"path":"app/(pages)/index/page.tsx","content":"..."}]`;
          const user=\`/plan/plan.md\n\${plan}\n\n/plan/brand-brief.md\n\${brief}\`;
          const body={model:"gpt-4o-mini",messages:[{role:"system",content:sys},{role:"user",content:user}]};
          fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${process.env.OPENAI_API_KEY}`,"Content-Type":"application/json"},body:JSON.stringify(body)})
          .then(r=>r.json()).then(j=>{
            const txt=j.choices?.[0]?.message?.content||"[]";
            let arr=[]; try{arr=JSON.parse(txt);}catch(e){arr=[];}
            const mkdirp=(p)=>fs.mkdirSync(p,{recursive:true});
            mkdirp("app"); mkdirp("app/(pages)");
            for(const f of arr){ const p=f.path.replace(/^\/+/,""); mkdirp(path.dirname(p)); fs.writeFileSync(p,f.content||""); }
            mkdirp("plan"); fs.copyFileSync("plan/plan.md","plan/plan.md"); fs.copyFileSync("plan/brand-brief.md","plan/brand-brief.md");
          });
          '

      - name: Create build branch
        id: branch
        run: |
          BR="build-${{ github.event.client_payload.recordId }}"
          git config user.name "zipsite-bot"
          git config user.email "bot@zipsitestudio.com"
          git checkout -b "$BR"
          echo "BRANCH=$BR" >> $GITHUB_OUTPUT

      - name: Commit files
        run: |
          git add -A
          git commit -m "auto: plan + scaffold from Airtable ${{ github.event.client_payload.recordId }}"
          git push -u origin "${{ steps.branch.outputs.BRANCH }}"

      - name: Open Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          title: Auto build for ${{ github.event.client_payload.recordId }}
          body: Generated from Airtable record
          branch: ${{ steps.branch.outputs.BRANCH }}
          base: main
          delete-branch: false
